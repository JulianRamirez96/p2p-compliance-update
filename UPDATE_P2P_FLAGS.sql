-- P2P Table
CREATE TABLE P2P_MASTER_ANON (
    VENDOR_ID VARCHAR2(2000),
    VENDOR_NAME VARCHAR(2000),
    INVOICE_ID VARCHAR2(2000),
    CONCAT_KEY VARCHAR(2000),
    COMPLIANCE_FLAG VARCHAR(200),
    LEADS VARCHAR(200)
);

-- Clone MASTER table for testing
CREATE TABLE MASTER_SPEND_FINAL AS SELECT * FROM MASTER_SPEND_BACKUP;

-- Apply Updates to MASTER_SPEND_FINAL
SET DEFINE OFF;
SET SERVEROUTPUT ON;

BEGIN
    MERGE INTO MASTER_SPEND_FINAL master
    USING (
        SELECT *
        FROM (
            SELECT
                TRIM(VENDOR_ID) AS VENDOR_ID,
                TRIM(INVOICE_ID || '') AS INVOICE_ID,
                COMPLIANCE_FLAG,
                LEADS,
                ROW_NUMBER() OVER (
                    PARTITION BY TRIM(VENDOR_ID), TRIM(INVOICE_ID || '')
                    ORDER BY COMPLIANCE_FLAG NULLS LAST
                ) AS rn
            FROM P2P_MASTER_ANON
        )
        WHERE rn = 1
    ) p2p
    ON (
        TRIM(master.SUPPLIER_ID) = TRIM(p2p.VENDOR_ID)
        AND LTRIM(TRIM(master.INVOICE_ID), '0') = LTRIM(TRIM(p2p.INVOICE_ID), '0')
        AND master.SOURCE_TYPE = 'Invoice'
        AND master.FISCAL_MONTH IN (
            'FY24 01-JAN', 'FY24 02-FEB', 'FY24 03-MAR', 'FY24 04-APR',
            'FY24 05-MAY', 'FY24 06-JUN', 'FY24 07-JUL', 'FY24 08-AUG',
            'FY24 09-SEP', 'FY24 10-OCT', 'FY24 11-NOV', 'FY24 12-DEC',
            'FY25 01-JAN', 'FY25 02-FEB', 'FY25 03-MAR'
        )
    )
    WHEN MATCHED THEN
        UPDATE SET
            master.COMPLIANCE_FLAG = NVL(p2p.COMPLIANCE_FLAG, 'Not in P2P'),
            master.LEADS = NVL(p2p.LEADS, 'Not in P2P');

    UPDATE MASTER_SPEND_FINAL master
    SET 
        master.COMPLIANCE_FLAG = 'Not in P2P',
        master.LEADS = 'Not in P2P'
    WHERE master.SOURCE_TYPE = 'Invoice'
      AND master.FISCAL_MONTH IN (
        'FY24 01-JAN', 'FY24 02-FEB', 'FY24 03-MAR', 'FY24 04-APR',
        'FY24 05-MAY', 'FY24 06-JUN', 'FY24 07-JUL', 'FY24 08-AUG',
        'FY24 09-SEP', 'FY24 10-OCT', 'FY24 11-NOV', 'FY24 12-DEC',
        'FY25 01-JAN', 'FY25 02-FEB', 'FY25 03-MAR'
      )
      AND NOT EXISTS (
        SELECT 1
        FROM P2P_MASTER_ANON p
        WHERE TRIM(p.VENDOR_ID) = TRIM(master.SUPPLIER_ID)
          AND LTRIM(TRIM(p.INVOICE_ID), '0') = LTRIM(TRIM(master.INVOICE_ID), '0')
      );

    DBMS_OUTPUT.PUT_LINE('Merge and fallback update completed.');
    COMMIT;
END;

-- COMPARE SPEND BEFORE AND AFTER:
SELECT 'BEFORE_UPDATE' SOURCE, SUM(SPEND_USD) 
FROM MASTER_SPEND_BACKUP
WHERE SOURCE_TYPE = 'Invoice' AND FISCAL_YEAR IN ('FY_2024', 'FY_2025')
UNION ALL
SELECT 'AFTER_UPDATE' SOURCE, SUM(SPEND_USD) 
FROM MASTER_SPEND_FINAL
WHERE SOURCE_TYPE = 'Invoice' AND FISCAL_YEAR IN ('FY_2024', 'FY_2025');

-- QA: Compare updated fields against P2P_MASTER_ANON
WITH p2p_dedup AS (
    SELECT
        TRIM(VENDOR_ID) AS VENDOR_ID,
        LTRIM(TRIM(INVOICE_ID), '0') AS INVOICE_ID,
        COMPLIANCE_FLAG,
        LEADS,
        ROW_NUMBER() OVER (
            PARTITION BY TRIM(VENDOR_ID), LTRIM(TRIM(INVOICE_ID), '0')
            ORDER BY COMPLIANCE_FLAG NULLS LAST
        ) AS rn
    FROM P2P_MASTER_ANON
),
p2p_final AS (
    SELECT * FROM p2p_dedup WHERE rn = 1
)
SELECT
    master.SUPPLIER_ID,
    p2p.VENDOR_ID,
    master.INVOICE_ID,
    p2p.INVOICE_ID AS P2P_INVOICE_ID,
    master.FISCAL_MONTH,
    master.SOURCE_TYPE,
    master.COMPLIANCE_FLAG AS MASTER_FLAG,
    p2p.COMPLIANCE_FLAG AS P2P_FLAG,
    master.LEADS AS MASTER_LEADS,
    p2p.LEADS AS P2P_LEADS
FROM MASTER_SPEND_FINAL master
LEFT JOIN p2p_final p2p
    ON TRIM(master.SUPPLIER_ID) = p2p.VENDOR_ID
   AND LTRIM(TRIM(master.INVOICE_ID), '0') = p2p.INVOICE_ID
WHERE master.FISCAL_MONTH IN (
    'FY24 01-JAN', 'FY24 02-FEB', 'FY24 03-MAR', 'FY24 04-APR',
    'FY24 05-MAY', 'FY24 06-JUN', 'FY24 07-JUL', 'FY24 08-AUG',
    'FY24 09-SEP', 'FY24 10-OCT', 'FY24 11-NOV', 'FY24 12-DEC',
    'FY25 01-JAN', 'FY25 02-FEB', 'FY25 03-MAR'
)
AND (
    (
        master.SOURCE_TYPE = 'Invoice'
        AND (
            (p2p.COMPLIANCE_FLAG IS NOT NULL AND master.COMPLIANCE_FLAG != p2p.COMPLIANCE_FLAG)
            OR (p2p.LEADS IS NOT NULL AND master.LEADS != p2p.LEADS)
            OR (p2p.COMPLIANCE_FLAG IS NULL AND master.COMPLIANCE_FLAG != 'Not in P2P')
            OR (p2p.LEADS IS NULL AND master.LEADS != 'Not in P2P')
        )
    )
    OR (
        master.SOURCE_TYPE <> 'Invoice'
        AND (
            master.COMPLIANCE_FLAG != 'NO'
            OR master.LEADS != 'No'
        )
    )
);

-- Results_Check.csv Export:
SELECT 
    COALESCE(b.FISCAL_MONTH, a.FISCAL_MONTH) AS FISCAL_MONTH,
    COALESCE(b.COMPLIANCE_FLAG, a.COMPLIANCE_FLAG) AS COMPLIANCE_FLAG,
    COALESCE(b.LEADS, a.LEADS) AS LEADS,
    a.BEFORE_UPDATE,
    b.AFTER_UPDATE
FROM (
    SELECT 
        FISCAL_MONTH,
        COMPLIANCE_FLAG,
        LEADS,
        SUM(SPEND_USD) AS BEFORE_UPDATE
    FROM MASTER_SPEND_BACKUP
    WHERE SOURCE_TYPE = 'Invoice'
      AND FISCAL_YEAR IN ('FY_2024', 'FY_2025')
    GROUP BY FISCAL_MONTH, COMPLIANCE_FLAG, LEADS
) a
FULL OUTER JOIN (
    SELECT 
        FISCAL_MONTH,
        COMPLIANCE_FLAG,
        LEADS,
        SUM(SPEND_USD) AS AFTER_UPDATE
    FROM MASTER_SPEND_FINAL
    WHERE SOURCE_TYPE = 'Invoice'
      AND FISCAL_YEAR IN ('FY_2024', 'FY_2025')
    GROUP BY FISCAL_MONTH, COMPLIANCE_FLAG, LEADS
) b
ON a.FISCAL_MONTH = b.FISCAL_MONTH
   AND a.COMPLIANCE_FLAG = b.COMPLIANCE_FLAG
   AND a.LEADS = b.LEADS
ORDER BY 
    COALESCE(b.FISCAL_MONTH, a.FISCAL_MONTH),
    COALESCE(b.COMPLIANCE_FLAG, a.COMPLIANCE_FLAG),
    COALESCE(b.LEADS, a.LEADS);

-- Invoices_Check.csv Export:
SELECT 
    SUPPLIER_ID,
    INVOICE_ID,
    MAX(COMPLIANCE_FLAG_BEFORE) AS COMPLIANCE_FLAG_BEFORE,
    MAX(COMPLIANCE_FLAG_AFTER) AS COMPLIANCE_FLAG_AFTER,
    MAX(LEADS_BEFORE) AS LEADS_BEFORE,
    MAX(LEADS_AFTER) AS LEADS_AFTER,
    SUM(SPEND_USD_BEFORE) AS SPEND_USD_BEFORE,
    SUM(SPEND_USD_AFTER) AS SPEND_USD_AFTER,
    CASE 
        WHEN MAX(COMPLIANCE_FLAG_BEFORE) != MAX(COMPLIANCE_FLAG_AFTER)
          OR MAX(LEADS_BEFORE) != MAX(LEADS_AFTER)
        THEN 'Changed'
        ELSE 'No Change'
    END AS UPDATE_STATUS
FROM (
    SELECT 
        SUPPLIER_ID,
        INVOICE_ID,
        COMPLIANCE_FLAG AS COMPLIANCE_FLAG_BEFORE,
        NULL AS COMPLIANCE_FLAG_AFTER,
        LEADS AS LEADS_BEFORE,
        NULL AS LEADS_AFTER,
        SPEND_USD AS SPEND_USD_BEFORE,
        NULL AS SPEND_USD_AFTER
    FROM 
        MASTER_SPEND_BACKUP
    WHERE 
        SOURCE_TYPE = 'Invoice' AND
        FISCAL_YEAR IN ('FY_2024', 'FY_2025')

    UNION ALL

    SELECT 
        SUPPLIER_ID,
        INVOICE_ID,
        NULL AS COMPLIANCE_FLAG_BEFORE,
        COMPLIANCE_FLAG AS COMPLIANCE_FLAG_AFTER,
        NULL AS LEADS_BEFORE,
        LEADS AS LEADS_AFTER,
        NULL AS SPEND_USD_BEFORE,
        SPEND_USD AS SPEND_USD_AFTER
    FROM 
        MASTER_SPEND_FINAL
    WHERE 
        SOURCE_TYPE = 'Invoice' AND
        FISCAL_YEAR IN ('FY_2024', 'FY_2025')
) combined
GROUP BY 
    SUPPLIER_ID,
    INVOICE_ID
HAVING 
    MAX(COMPLIANCE_FLAG_BEFORE) != MAX(COMPLIANCE_FLAG_AFTER)
 OR MAX(LEADS_BEFORE) != MAX(LEADS_AFTER)
ORDER BY 
    SUPPLIER_ID, 
    INVOICE_ID;
